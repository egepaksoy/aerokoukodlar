# Form implementation generated from reading ui file '.\a.ui'
#
# Created by: PyQt6 UI code generator 6.8.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import QPixmap, QImage
from PyQt6.QtCore import QTimer
import cv2


class Ui_MainWindow_Saldiri(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1290, 720)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1290, 720))
        MainWindow.setMaximumSize(QtCore.QSize(1290, 720))
        MainWindow.setBaseSize(QtCore.QSize(0, 0))

        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(32)
        self.pushButton.setFont(font)
        self.pushButton.setGeometry(QtCore.QRect(5, 500, 1280, 190))
        self.pushButton.setObjectName("pushButton")

        self.video_label1 = QtWidgets.QLabel(parent=self.centralwidget)
        self.video_label1.setGeometry(QtCore.QRect(5, 5, 640, 480))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.video_label1.sizePolicy().hasHeightForWidth())
        self.video_label1.setSizePolicy(sizePolicy)
        self.video_label1.setMinimumSize(QtCore.QSize(640, 480))
        self.video_label1.setMaximumSize(QtCore.QSize(640, 480))
        self.video_label1.setBaseSize(QtCore.QSize(640, 480))
        self.video_label1.setText("")
        self.video_label1.setObjectName("video_label1")

        self.video_label2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.video_label2.setGeometry(QtCore.QRect(645, 5, 640, 480))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.video_label2.sizePolicy().hasHeightForWidth())
        self.video_label2.setSizePolicy(sizePolicy)
        self.video_label2.setMinimumSize(QtCore.QSize(640, 480))
        self.video_label2.setMaximumSize(QtCore.QSize(640, 480))
        self.video_label2.setBaseSize(QtCore.QSize(640, 480))
        self.video_label2.setText("")
        self.video_label2.setObjectName("video_label2")

        self.start_camera()

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ARAYÜZ"))
        self.pushButton.setText(_translate("MainWindow", "HEDEFLER"))

    def start_camera(self):
        # İki ayrı kamera akışı için iki farklı VideoCapture nesnesi
        self.cap1 = cv2.VideoCapture(1)  # İlk kamera
        self.cap2 = cv2.VideoCapture(1)  # İkinci kamera
        
        self.timer1 = QTimer()
        self.timer1.timeout.connect(self.update_frame1)
        self.timer1.start(30)
        
        self.timer2 = QTimer()
        self.timer2.timeout.connect(self.update_frame2)
        self.timer2.start(30)

    def update_frame1(self):
        ret, frame = self.cap1.read()
        if ret:
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame = cv2.resize(frame, (self.video_label1.width(), self.video_label1.height()))
            q_img = QImage(frame.data, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format.Format_RGB888)
            self.video_label1.setPixmap(QPixmap.fromImage(q_img))

    def update_frame2(self):
        ret, frame = self.cap2.read()
        if ret:
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame = cv2.resize(frame, (self.video_label2.width(), self.video_label2.height()))
            q_img = QImage(frame.data, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format.Format_RGB888)
            self.video_label2.setPixmap(QPixmap.fromImage(q_img))

    def closeEvent(self, event):
        self.cap1.release()
        self.cap2.release()
        event.accept()
